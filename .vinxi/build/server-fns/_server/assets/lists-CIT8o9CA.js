import{k as a,b as d,r as e,l as c,q as A}from"./backend-hM8sUyp6.js";import g from"dayjs";import y from"dayjs/plugin/utc.js";import"solid-js";import"solid-js/web";import"./routing-BfDgGOS4.js";import"solid-js/web/storage";import"h3";import"node:async_hooks";g.extend(y);const b=a(async()=>{try{const t=(await d())?.usersId;if(!t)throw e("/login");const r=await c.getUserLists(t);if(r.status!==200)throw new Error;return await r.json()}catch(s){return console.error(s),[]}},"src_db_lists_ts--getUserLists_query","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),q=a(async s=>{try{const r=(await d())?.usersId;if(!r)throw e("/login");const i=await(await c.getList(s)).json();if(i.length===0)throw new Error("List not found");const n=i[0];if(n.ownersId!==r)throw e("/lists");return n}catch{throw e("/login")}},"src_db_lists_ts--getList_query","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),$=a(async s=>{try{if(!(await d())?.usersId)throw e("/login");return await(await c.getListLocations(s)).json()}catch{throw e("/login")}},"src_db_lists_ts--listLocations_query","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),C=a(async s=>{try{const r=(await d())?.usersId;if(!r)throw e("/login");return await(await c.getLocationLists(r,s)).json()}catch{return[]}},"src_db_lists_ts--sensorNodeLists_query","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),E=a(async s=>{const r=(await d())?.usersId;if(!r)throw e("/login");const o=String(s.get("list-name")),i=String(s.get("list-description"));if(!o||o=="")throw Error("Name required");let n;try{n=await(await c.createList({usersId:r,label:o,description:i})).json()}catch(l){return console.error(`create list failed: ${l}`),new Error("Failed to create list")}throw e(`/lists/${n.create_list}`)},"src_db_lists_ts--createList_action","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),F=a(async s=>{if(!(await d())?.usersId)throw e("/login");const o=Number(s.get("lists-id")),i=String(s.get("list-name")),n=String(s.get("list-description"));try{await c.updateList({listsId:o,label:i,description:n})}catch(l){return console.error(`update list failed: ${l}`),new Error("Failed to update list")}throw e(`/lists/${o}`,{revalidate:_.keyFor()[o]})},"src_db_lists_ts--updateList_action","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),j=a(async s=>{const t=Number(s.get("lists-id"));if(!(await d())?.usersId)throw e("/login");try{await c.deleteList(t)}catch(i){return console.error(`delete list failed: ${i}`),new Error("Failed to delete list")}throw e("/lists",{revalidate:_.keyFor()[t]})},"src_db_lists_ts--deleteList_action","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),D=a(async s=>{const t=new URL("https://api.openaq.org");return t.pathname=`/v3/locations/${s}`,(await(await fetch(t.href,{headers:{"Content-Type":"application/json","X-API-Key":"be79fbc7b35789af970752f816b8bf9b79a5198ef9157a4c596e27a5bd70fa40"}})).json()).results[0]},"src_db_lists_ts--getLocationById_query","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),x=a(async(s,t)=>{if(!(await d())?.usersId)throw e("/login");try{await c.deleteListLocation(s,t)}catch(i){return console.error(`create list location failed: ${i}`),new Error("Failed to create list location")}throw e(`/lists/${s}`,{revalidate:_.keyFor[s]})},"src_db_lists_ts--removeSensorNodesList_action","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),O=a(async s=>{if(!(await d())?.usersId)throw e("/login");const o=String(s.get("redirect")),i=Number(s.get("sensor-nodes-id"));for(const[n,l]of s.entries())if(n.includes("list-")){const w=Number(n.split("-")[1]),I=Number(l)==1,L=(await(await c.getListLocations(w)).json()).map(u=>u.id);if(L.indexOf(i)===-1&&I){try{await c.createListLocation(w,{locationsId:i})}catch(u){return console.error(`create list location failed: ${u}`),new Error("Failed to create list location")}throw e(`/lists/${w}`)}if(L.indexOf(i)!==-1&&!I){try{await c.deleteListLocation(w,i)}catch(u){return console.error(`delete list failed: ${u}`),new Error("Failed to delete list location")}throw e(o)}}},"src_db_lists_ts--addRemoveSensorNodesList_action","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),B=a(async s=>{const t=Number(s.get("lists-id")),r=Number(s.get("locations-id"));if(!(await d())?.usersId)throw e("/login");try{await c.deleteListLocation(t,r)}catch(n){return console.error(`delete list failed: ${n}`),new Error("Failed to delete list")}throw e(`/lists/${t}`)},"src_db_lists_ts--deleteListLocation_action","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),_=A(b,"get-user-lists");export{O as addRemoveSensorNodesList_action,E as createList_action,B as deleteListLocation_action,j as deleteList_action,q as getList_query,D as getLocationById_query,b as getUserLists_query,$ as listLocations_query,x as removeSensorNodesList_action,C as sensorNodeLists_query,F as updateList_action};
