import{createComponent as L,ssr as P,ssrHydrationKey as U,ssrAttribute as Z,escape as x,ssrClassList as G,ssrStyle as J}from"solid-js/web";import{useContext as E,createContext as T,createUniqueId as D,createSignal as S,onMount as W,createEffect as p,on as V,onCleanup as I}from"solid-js";import{createStore as Y}from"solid-js/store";const[R,F]=Y({map:null}),O=T([R]),N=()=>E(O),A=e=>(e.map&&F("map",e.map),L(O.Provider,{value:[R],get children(){return e.children}})),K=["onMouseDown","onMouseUp","onMouseOver","onMouseOut","onMouseMove","onMouseEnter","onMouseLeave","onPreClick","onClick","onDblClick","onContextMenu","onTouchStart","onTouchEnd","onTouchCancel","onWheel","onResize","onRemove","onTouchMove","onMoveStart","onMove","onMoveEnd","onDragStart","onDrag","onDragEnd","onZoomStart","onZoom","onZoomEnd","onRotateStart","onRotate","onRotatEnd","onPitchStart","onPitch","onPitchEnd","onBoxZoomStart","onBoxZoomEnd","onBoxZoomCancel","onWebglContextLost","onWebglContextRestored","onLoad","onRender","onIdle","onError","onData","onStyleData","onSourceData","onDataLoading","onStyleDataLoading","onSourceDataLoading","onStyleImageMissing"],oe=["onMouseDown","onMouseUp","onMouseOver","onMouseOut","onMouseMove","onMouseEnter","onMouseLeave","onClick","onDblClick","onContextMenu","onTouchStart","onTouchEnd","onTouchCancel"],s="mapbox://styles/mapbox",b="https://raw.githubusercontent.com/",a="https://raw.githubusercontent.com/GIShub4/map-styles/main/",M="https://assets.vector.hereapi.com/styles/",H={mb:{light:`${s}/light-v11`,dark:`${s}/dark-v11`,street:`${s}/streets-v12`,outdoor:`${s}/outdoors-v12`,sat:`${s}/satellite-v9`,sat_street:`${s}/satellite-streets-v12`,nav:`${s}/navigation-guidance-day-v4`,nav_night:`${s}/navigation-guidance-night-v4`,basic:`${s}/cjf4m44iw0uza2spb3q0a7s41`,monochrome:`${s}/cjv6rzz4j3m4b1fqcchuxclhb`,leshine:`${s}/cjcunv5ae262f2sm9tfwg8i0w`,icecream:`${s}/cj7t3i5yj0unt2rmt3y4b5e32`,cali:`${s}/cjerxnqt3cgvp2rmyuxbeqme7`,northstar:`${s}/cj44mfrt20f082snokim4ungi`,mineral:`${s}/cjtep62gq54l21frr1whf27ak`,moonlight:`${s}/cj3kbeqzo00022smj7akz3o1e`,frank:`${s}-map-design/ckshxkppe0gge18nz20i0nrwq`,minimo:`${s}-map-design/cksjc2nsq1bg117pnekb655h1`,decimal:`${s}-map-design/ck4014y110wt61ctt07egsel6`,standard:`${s}-map-design/ckr0svm3922ki18qntevm857n`,blueprint:`${s}-map-design/cks97e1e37nsd17nzg7p0308g`,bubble:`${s}-map-design/cksysy2nl62zp17quosctdtcc`,pencil:`${s}-map-design/cks9iema71es417mlrft4go2k`,swiss_ski:`${b}mapbox/mapbox-gl-swiss-ski-style/master/cij1zoclj002y8rkkdjl69psd.json`,vintage:`${b}mapbox/mapbox-gl-vintage-style/master/cif5p01n202nisaktvljx9mv3.json`,whaam:`${b}mapbox/mapbox-gl-whaam-style/master/cii8323c8004w0nlvtss3dbm2.json`,neon:`${b}NatEvatt/awesome-mapbox-gl-styles/master/styles/Neon/style.json`,camoflauge:`${b}jingsam/mapbox-gl-styles/master/Camouflage.json`,emerald:`${b}jingsam/mapbox-gl-styles/master/Emerald.json`,runner:`${b}jingsam/mapbox-gl-styles/master/Runner.json`,x_ray:`${b}jingsam/mapbox-gl-styles/master/X-ray.json`},here:{base:`${M}berlin/base/mapbox/tilezen?apikey={apikey}`,day:`${M}berlin/day/mapbox/tilezen?apikey={apikey}`,night:`${M}berlin/night/mapbox/tilezen?apikey={apikey}`},esri:{blueprint:`${a}esri:blueprint.json`,charted_territory:`${a}esri:charted-territory.json`,colored_pencil:`${a}esri:colored-pencil.json`,community:`${a}esri:community.json`,mid_century:`${a}esri:mid-century.json`,modern_antique:`${a}esri:modern-antique.json`,nat_geo:`${a}esri:national-geographic.json`,newspaper:`${a}esri:newspaper.json`,open_street_map:`${a}esri:open-street-map.json`,light_gray_canvas:`${a}esri:light-gray-canvas.json`,dark_gray_canvas:`${a}esri:dark-gray-canvas.json`,human_geo_light:`${a}esri:human-geography-light.json`,human_geo_dark:`${a}esri:human-geography-dark.json`,world_navigation:`${a}esri:world-navigation.json`,world_street:`${a}esri:world-street.json`,world_street_night:`${a}esri:world-street-night.json`,world_terrain:`${a}esri:world-terrain.json`,world_terrain_hybrid:`${a}esri:world-terrain-hybrid.json`,world_topographic:`${a}esri:world-topographic.json`,chromium:`${a}esri:chromium.json`,dreamcatcher:`${a}esri:dreamcatcher.json`,seahaven:`${a}esri:seahaven.json`,sangria:`${a}esri:sangria.json`,mercurial:`${a}esri:mercurial.json`,imagery:`${a}esri:imagery.json`,imagery_hybrid:`${a}esri:imagery-hybrid.json`,firefly:`${a}esri:firefly.json`,firefly_hybrid:`${a}esri:firefly-hybrid.json`,oceans:`${a}esri:oceans.json`}},_="https://{s}.basemaps.cartocdn.com/rastertiles/",j="https://stamen-tiles-{s}.a.ssl.fastly.net/",y="https://{s}.tile.thunderforest.com/",C={osm:{org:"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",human:"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png",cycle:"https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png",topo:"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png",_copy:'<a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap</a>'},carto:{voyager:`${_}voyager_labels_under/{z}/{x}/{y}{r}.png`,positron:`${_}light_all/{z}/{x}/{y}{r}.png`,dark:`${_}dark_all/{z}/{x}/{y}{r}.png`,_copy:'<a href="https://carto.com/attribution" target="_blank">&copy; Carto</a>'},stamen:{toner:`${j}toner/{z}/{x}/{y}{r}.png`,toner_lite:`${j}toner-lite/{z}/{x}/{y}{r}.png`,watercolor:`${j}watercolor/{z}/{x}/{y}.png`,terrain:`${j}terrain/{z}/{x}/{y}{r}.png`,_copy:'<a href="https://stamen.com/privacy-policy" target="_blank">&copy; Stamen Design</a>'},tf:{cycle:`${y}cycle/{z}/{x}/{y}{r}.png?apikey={apikey}`,trans:`${y}transport/{z}/{x}/{y}{r}.png?apikey={apikey}`,trans_dark:`${y}transport-dark/{z}/{x}/{y}{r}.png?apikey={apikey}`,landscape:`${y}landscape/{z}/{x}/{y}{r}.png?apikey={apikey}`,outdoors:`${y}outdoors/{z}/{x}/{y}{r}.png?apikey={apikey}`,neighbourhood:`${y}neighbourhood/{z}/{x}/{y}{r}.png?apikey={apikey}`,spinal:`${y}spinal-map/{z}/{x}/{y}{r}.png?apikey={apikey}`,pioneer:`${y}pioneer/{z}/{x}/{y}{r}.png?apikey={apikey}`,atlas:`${y}atlas/{z}/{x}/{y}{r}.png?apikey={apikey}`,mobile:`${y}mobile-atlas/{z}/{x}/{y}{r}.png?apikey={apikey}`,_copy:'<a href="https://thunderforest.com/privacy" target="_blank">&copy; Thunderforest</a>'}};var Q=["<div",' class="','" style="','"></div>'];const ne=e=>{e.id??=D();let t,h,k;const[g,i]=S(null),[m,f]=S(typeof window<"u"&&window.matchMedia("(prefers-color-scheme: dark)").matches||typeof document<"u"&&document.body.classList.contains("dark")),[$,w]=S(!1),d=(o,r)=>{e.debug&&console.debug("%c[MapGL]","color: #0ea5e9",o,r||"")},z=(o,r)=>{const n=m()&&r?r:o;return typeof n=="string"||n instanceof String?n?.split(":").reduce((c,u)=>c&&c[u],H)?.replace("{apikey}",e.apikey||void 0)||n:n||{version:8,sources:{},layers:[]}};W(async()=>{let o=e.mapLib||await import("mapbox-gl");if(o.Map||(o=window.maplibregl||window.mapboxgl),typeof o.supported=="function"&&!o.supported())throw new Error("Mapbox GL not supported");d(`Map (v${o.version}) loading...`),t=new o.Map({accessToken:e.options?.accessToken||"pk.eyJ1IjoibWJhZ3JhdGlvbmkiLCJhIjoiY21nYzdvYzRtMWRlaTJrczdhdmFvY3R1ZSJ9.q1gwOrfrGLBRKTef6ylZzQ",interactive:e.options?.interactive||!!e.onViewportChange,...e.options,...e.viewport,projection:e.options?.projection,container:h,style:z(e.options?.style,e.darkStyle),fitBoundsOptions:{padding:e.viewport?.padding}}),t.debug=e.debug,t.sourceIdList=[],t.layerIdList=[],window.MapLib=o,K.forEach(r=>{const n=e[r];let c=!0;if(n){const u=r.slice(2).toLowerCase();typeof n=="function"?t.on(u,l=>{l.clickOnLayer||(n(l),c&&d(`Map '${u}' event:`,l),c=!1)}):Object.keys(n).forEach(l=>{t.on(u,l,v=>{v.clickOnLayer||(n[l](v),c&&d(`Map '${u}' event on '${l}':`,v),c=!1)})})}}),t.once("load",()=>{i(t),d("Map loaded"),["mousedown","touchstart","wheel"].forEach(n=>t.on(n,c=>!c.rotate&&e.onUserInteraction?.(!0))),["moveend","mouseup","touchend"].forEach(n=>t.on(n,c=>!c.rotate&&e.onUserInteraction?.(!1)));const r=typeof window<"u"&&window?.matchMedia("(prefers-color-scheme: dark)");r?.addEventListener("change",()=>{f(r.matches),d("Set dark theme to:",r.matches?.toString())}),k=new MutationObserver(()=>{const n=document.body.classList.contains("dark");f(n),d("Set theme to:",n)}),k.observe(document.body,{attributes:!0}),t.on("move",n=>{const c={...e.viewport,id:e.id,point:{x:n.originalEvent?.x,y:n.originalEvent?.y},center:e.viewport?.center?.lat?t.getCenter():[t.getCenter().lng,t.getCenter().lat],zoom:t.getZoom(),pitch:t.getPitch(),bearing:t.getBearing(),inTransit:!0,bounds:null};w(!0),!n.viewport&&e.onViewportChange?.(c)}),t.on("moveend",n=>{!n.rotate&&e.onViewportChange?.({...e.viewport,inTransit:!1}),w(!1)})})}),p(V(()=>e.viewport,o=>{if(e.id!==o?.id||$())return;const r={...o,...o.bounds?t.cameraForBounds(o.bounds,{padding:o?.padding}):null};t.stop()[e.transitionType||"flyTo"](r),d(`Update Viewport (${e.transitionType||"flyTo"}):`,r)},{defer:!0})),p(()=>{const o=e.options?.projection;!t||!o||(t.setProjection(o),d("Set Projection to:",o))}),p(()=>{const o=e.cursorStyle;!t||!o||(t.getCanvas().style.cursor=o,d("Set Cursor to:",o))});const B=(o,r)=>(r.forEach(n=>{const c=o.findIndex(u=>n.metadata.smg.beforeType?u.type===n.metadata.smg.beforeType:u.id===n.metadata.smg.beforeId);o=c===-1?[...o,n]:[...o.slice(0,c),n,...o.slice(c+1)]}),o);return p(o=>{const r=z(e.options?.style,e.darkStyle);if(t?.isStyleLoaded()&&o!==r){const n=t.getStyle(),c=n.layers.filter(l=>t.layerIdList.includes(l.id)),u=Object.keys(n.sources).filter(l=>t.sourceIdList.includes(l)).reduce((l,v)=>({...l,[v]:n.sources[v]}),{});t.setStyle(r),t.once("styledata",()=>{if(!c)return;const l=t.getStyle();t.setStyle({...l,sources:{...l.sources,...u},layers:B(l.layers,c),fog:n.fog,terrain:n.terrain}),d("Set Mapstyle to:",r)})}return r},e.options?.style),["showTileBoundaries","showTerrainWireframe","showCollisionBoxes","showPadding","showOverdrawInspector"].forEach(o=>{p(()=>{const r=e[o];!t||!r||(t[o]=r,d(`Set ${o} to:`,r))})}),I(()=>{k?.disconnect(),t?.remove(),d("Map removed")}),[P(Q,U()+Z("id",x(e.id,!0),!1),`${x(e?.class,!0)||""} ${x(G(e?.classList),!0)||""}`,J(e?.class||e?.classList?null:e.style||{position:"absolute",inset:0,"z-index":-1})),g()&&L(A,{get map(){return g()},get children(){return e.children}})]},q=T(),ae=()=>E(q),re=e=>{const[t]=N();e.id??=D();const h=(i,m)=>{t.map.debug&&console.debug("%c[MapGL]","color: #ec4899",i,m||"")},k=i=>{const m=i?.split(":").reduce(($,w)=>$&&$[w],C),f=m?{...e.source,url:"",tiles:[m.replace("{apikey}",e.source.apikey||void 0).replace("{r}",window.devicePixelRatio>1?"@2x":"")],attribution:C[i.split(":")[0]]._copy}:e.source;return f.tiles&&(f.tiles=["a","b","c"].map($=>f.tiles[0].replace("{s}",$))),f};t.map.addSource(e.id,k(e.source.url)),t.map.sourceIdList.push(e.id),h("Add Source:",e.id);const g=t.map.getSource(e.id);switch(e.source.type){case"geojson":p(()=>{const i=e.source.data;t.map.isSourceLoaded(e.id)&&(g.setData(i||{}),h("Update GeoJSON Data:",e.id))});break;case"image":p(()=>{const i=e.source.url,m=e.source.coordinates;t.map.isSourceLoaded(e.id)&&(g.updateImage(i,m),h("Update Image Data:",e.id))});break;case"vector":p(()=>{const i=e.source.url,m=e.source.tiles;t.map.isSourceLoaded(e.id)&&(i?g.setUrl(i):g.setTiles(m),h("Update Vector Data:",e.id))});break;case"raster":p(()=>{const i=k(e.source.url);t.map.isSourceLoaded(e.id)&&(i.url?g.setUrl(i.url):g.setTiles(i.tiles),h("Update Raster Data:",e.id))});break}return I(()=>{t.map?.getStyle().layers.forEach(i=>i.source===e.id&&t.map.removeLayer(i.id)),t.map?.getSource(e.id)&&t.map?.removeSource(e.id),h("Remove Source:",e.id)}),L(q.Provider,{get value(){return e.id},get children(){return e.children}})};export{ne as M,re as S,ae as a,oe as l,N as u};
