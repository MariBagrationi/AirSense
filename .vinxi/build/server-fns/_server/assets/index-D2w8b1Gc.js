import{createUniqueId as f,createEffect as c,onCleanup as y}from"solid-js";import{u,a as x,l as b}from"./maplibre-gl-Ukol7sIV.js";const g=["id","type","filter","source","source-layer","minzoom","metadata","maxzoom","paint","layout"],L=["visibility","line-join","line-cap","line-miter-limit","line-round-limit","line-sort-key","circle-sort-key","symbol-avoid-edges","symbol-placement","symbol-sort-key","symbol-spacing","symbol-z-order","icon-allow-overlap","icon-anchor","icon-ignore-placement","icon-image","icon-keep-upright","icon-offset","icon-optional","icon-padding","icon-pitch-alignment","icon-rotate","icon-rotation-alignment","icon-size","icon-text-fit","icon-text-fit-padding","text-allow-overlap","text-anchor","text-field","text-font","text-ignore-placement","text-justify","text-keep-upright","text-letter-spacing","text-line-height","text-max-angle","text-max-width","text-offset","text-optional","text-padding","text-pitch-alignment","text-radial-offset","text-rotate","text-rotation-alignment","text-size","text-transform","text-variable-anchor","text-writing-mode"],s=(e={},t={})=>[...new Set([...Object.keys(e),...Object.keys(t)])].reduce((n,i)=>{const a=e[i];return a!==t[i]&&n.push([i,a]),n},[]),d=(e,t)=>(e.startsWith(t)||e.startsWith("icon")||e.startsWith("text")?"":t+"-")+e.replace(/[A-Z]/g,l=>"-"+l.toLowerCase()),m=e=>{if(!e)return;let t={},l={},n={};return Object.entries(e).forEach(([i,a])=>{if(g.includes(i))n[i]=a;else{const o=d(i,e.type);L.includes(o)?t[o]=a:l[o]=a}}),e.paint&&Object.entries(e.paint).forEach(([i,a])=>l[d(i,e.type)]=a),e.layout&&Object.entries(e.layout).forEach(([i,a])=>t[d(i,e.type)]=a),{...n,paint:l,layout:t}},v=e=>{const[t]=u(),l=e.style?.source||x();e.id=e.id||e.customLayer?.id||f();const n=(i,a)=>{t.map.debug&&console.debug("%c[MapGL]","color: #10b981",i,a||"")};return t.map.addLayer(e.customLayer||{...m(e.style),id:e.id,source:l,metadata:{smg:{beforeType:e.beforeType,beforeId:e.beforeId}}},e.beforeType?t.map.getStyle().layers.find(i=>i.type===e.beforeType)?.id:e.beforeId),t.map.layerIdList.push(e.id),e.customLayer&&t.map.fire("load"),n("Add Layer:",e.id),b.forEach(i=>{if(e[i]){const a=i.slice(2).toLowerCase();t.map.on(a,e.id,o=>{o.clickOnLayer=!0,e[i](o),n(`Layer '${a}' event on '${e.id}':`,o)})}}),c(i=>{const a=m(e.style);if(a!==i)return a.layout!==i?.layout&&s(a.layout,i?.layout).forEach(([o,r])=>t.map.setLayoutProperty(e.id,o,r,{validate:!1})),a.paint!==i?.paint&&s(a.paint,i?.paint).forEach(([o,r])=>t.map.setPaintProperty(e.id,o,r,{validate:!1})),(a.minzoom!==i?.minzoom||a.maxzoom!==i?.maxzoom)&&t.map.setLayerZoomRange(e.id,a.minzoom,a.maxzoom),a.filter!==i?.filter&&t.map.setFilter(e.id,a.filter,{validate:!1}),n("Update Layer Style:",e.id),a},m(e.style)),c(i=>{if(e.visible!==i)return t.map.setLayoutProperty(e.id,"visibility",e.visible?"visible":"none",{validate:!1}),n(`Update Visibility (${e.id}):`,e.visible.toString()),e.visible},e.visible),c(async()=>{e.filter&&(!t.map.isStyleLoaded()&&await t.map.once("styledata"),t.map.setFilter(e.id,e.filter),n(`Update Filter (${e.id}):`,e.filter))}),c(async()=>{!e.featureState||e.featureState.id===null||(!t.map.isStyleLoaded()&&await t.map.once("styledata"),t.map.removeFeatureState({source:l,sourceLayer:e.style["source-layer"]}),t.map.setFeatureState({source:l,sourceLayer:e.style["source-layer"],id:e.featureState.id},e.featureState.state))}),y(()=>t.map?.getLayer(e.id)&&t.map?.removeLayer(e.id)),e.children};export{v as L};
