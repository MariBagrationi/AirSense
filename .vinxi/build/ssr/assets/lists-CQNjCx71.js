import{l as a,c as d,r as t,m as c,q as L,k as u}from"./backend-CgKBry6f.js";import y from"dayjs";import b from"dayjs/plugin/utc.js";y.extend(b);const h=a(async()=>{try{const e=(await d())?.usersId;if(!e)throw t("/login");const r=await c.getUserLists(e);if(r.status!==200)throw new Error;return await r.json()}catch(s){return console.error(s),[]}},"src_db_lists_ts--getUserLists_query","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),g=L(h,"get-user-lists"),f=a(async s=>{try{const r=(await d())?.usersId;if(!r)throw t("/login");const i=await(await c.getList(s)).json();if(i.length===0)throw new Error("List not found");const n=i[0];if(n.ownersId!==r)throw t("/lists");return n}catch{throw t("/login")}},"src_db_lists_ts--getList_query","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),j=L(f,"get-list"),p=a(async s=>{try{if(!(await d())?.usersId)throw t("/login");return await(await c.getListLocations(s)).json()}catch{throw t("/login")}},"src_db_lists_ts--listLocations_query","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),D=L(p,"list-locations"),v=a(async s=>{try{const r=(await d())?.usersId;if(!r)throw t("/login");return await(await c.getLocationLists(r,s)).json()}catch{return[]}},"src_db_lists_ts--sensorNodeLists_query","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),x=L(v,"sensor-node-lists"),S=a(async s=>{const r=(await d())?.usersId;if(!r)throw t("/login");const o=String(s.get("list-name")),i=String(s.get("list-description"));if(!o||o=="")throw Error("Name required");let n;try{n=await(await c.createList({usersId:r,label:o,description:i})).json()}catch(l){return console.error(`create list failed: ${l}`),new Error("Failed to create list")}throw t(`/lists/${n.create_list}`)},"src_db_lists_ts--createList_action","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),B=u(S,"create-list-action"),M=a(async s=>{if(!(await d())?.usersId)throw t("/login");const o=Number(s.get("lists-id")),i=String(s.get("list-name")),n=String(s.get("list-description"));try{await c.updateList({listsId:o,label:i,description:n})}catch(l){return console.error(`update list failed: ${l}`),new Error("Failed to update list")}throw t(`/lists/${o}`,{revalidate:g.keyFor()[o]})},"src_db_lists_ts--updateList_action","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),O=u(M,"update-list-action"),m=a(async s=>{const e=Number(s.get("lists-id"));if(!(await d())?.usersId)throw t("/login");try{await c.deleteList(e)}catch(i){return console.error(`delete list failed: ${i}`),new Error("Failed to delete list")}throw t("/lists",{revalidate:g.keyFor()[e]})},"src_db_lists_ts--deleteList_action","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),T=u(m,"delete-list-action"),N=a(async s=>{const e=new URL("https://api.openaq.org");return e.pathname=`/v3/locations/${s}`,(await(await fetch(e.href,{headers:{"Content-Type":"application/json","X-API-Key":"be79fbc7b35789af970752f816b8bf9b79a5198ef9157a4c596e27a5bd70fa40"}})).json()).results[0]},"src_db_lists_ts--getLocationById_query","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),K=L(N,"get-location-by-id-action"),U=a(async(s,e)=>{if(!(await d())?.usersId)throw t("/login");try{await c.deleteListLocation(s,e)}catch(i){return console.error(`create list location failed: ${i}`),new Error("Failed to create list location")}throw t(`/lists/${s}`,{revalidate:g.keyFor[s]})},"src_db_lists_ts--removeSensorNodesList_action","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server=");u(U,"remove-sensor-node-list-action");const k=a(async s=>{if(!(await d())?.usersId)throw t("/login");const o=String(s.get("redirect")),i=Number(s.get("sensor-nodes-id"));for(const[n,l]of s.entries())if(n.includes("list-")){const _=Number(n.split("-")[1]),I=Number(l)==1,A=(await(await c.getListLocations(_)).json()).map(w=>w.id);if(A.indexOf(i)===-1&&I){try{await c.createListLocation(_,{locationsId:i})}catch(w){return console.error(`create list location failed: ${w}`),new Error("Failed to create list location")}throw t(`/lists/${_}`)}if(A.indexOf(i)!==-1&&!I){try{await c.deleteListLocation(_,i)}catch(w){return console.error(`delete list failed: ${w}`),new Error("Failed to delete list location")}throw t(o)}}},"src_db_lists_ts--addRemoveSensorNodesList_action","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),P=u(k,"add-remove-sensor-node-list-action"),R=a(async s=>{const e=Number(s.get("lists-id")),r=Number(s.get("locations-id"));if(!(await d())?.usersId)throw t("/login");try{await c.deleteListLocation(e,r)}catch(n){return console.error(`delete list failed: ${n}`),new Error("Failed to delete list")}throw t(`/lists/${e}`)},"src_db_lists_ts--deleteListLocation_action","C:/Users/MARIAM/Desktop/AirSense/AirSense/src/db/lists.ts?tsr-directive-use-server="),X=u(R,"delete-list-location-action");export{j as a,K as b,B as c,T as d,X as e,P as f,g,D as l,x as s,O as u};
